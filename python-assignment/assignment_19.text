Answers

1. Make a class called Thing with no contents and create an object called example.

    Ans-1:

class Thing:
    pass

print(Thing)  # Output: <class '__main__.Thing'>
example = Thing()
print(example)  # Output: <__main__.Thing object at 0x...>

    The printed values are different; one is the class itself and the other is the object.

2. Create a new class called Thing2 and add the value 'abc' to the letters class attribute.

    Ans-2:

class Thing2:
    letters = 'abc'

print(Thing2.letters)  # Output: abc

3. Make another class called Thing3 and assign 'xyz' to an instance attribute called letters.

    Ans-3:
class Thing3:
    def __init__(self):
        self.letters = 'xyz'

thing3_instance = Thing3()
print(thing3_instance.letters)  # Output: xyz

    Yes, you need to create an object to access instance attributes.

4. Create an Element class with name, symbol, and number.

    Ans-4:

class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

hydrogen = Element('Hydrogen', 'H', 1)

5. Create a dictionary and an object called hydrogen from the Element class.

    Ans-5:
element_dict = {'name': 'Hydrogen', 'symbol': 'H', 'number': 1}
hydrogen = Element(**element_dict)

6. Define a dump() method for the Element class.

    Ans-6:

class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

    def dump(self):
        print(f'Name: {self.name}, Symbol: {self.symbol}, Number: {self.number}')

hydrogen = Element('Hydrogen', 'H', 1)
hydrogen.dump()  # Output: Name: Hydrogen, Symbol: H, Number: 1

7. Change dump to str in the Element class.

    Ans-7:

class Element:
    def __init__(self, name, symbol, number):
        self.name = name
        self.symbol = symbol
        self.number = number

    def __str__(self):
        return f'Name: {self.name}, Symbol: {self.symbol}, Number: {self.number}'

hydrogen = Element('Hydrogen', 'H', 1)
print(hydrogen)  # Output: Name: Hydrogen, Symbol: H, Number: 1

8. Modify Element to make attributes private and define getter properties.

    Ans-8:

class Element:
    def __init__(self, name, symbol, number):
        self.__name = name
        self.__symbol = symbol
        self.__number = number

    @property
    def name(self):
        return self.__name

    @property
    def symbol(self):
        return self.__symbol

    @property
    def number(self):
        return self.__number

hydrogen = Element('Hydrogen', 'H', 1)
print(hydrogen.name, hydrogen.symbol, hydrogen.number)  # Output: Hydrogen H 1

9. Define Bear, Rabbit, and Octothorpe classes with an eats() method.

    Ans-9:
class Bear:
    def eats(self):
        return 'berries'

class Rabbit:
    def eats(self):
        return 'clover'

class Octothorpe:
    def eats(self):
        return 'campers'

bear = Bear()
rabbit = Rabbit()
octothorpe = Octothorpe()

print(bear.eats())       # Output: berries
print(rabbit.eats())     # Output: clover
print(octothorpe.eats()) # Output: campers

10. Define Laser, Claw, and SmartPhone classes with a does() method and Robot class.

    Ans-10:
class Laser:
    def does(self):
        return 'disintegrate'

class Claw:
    def does(self):
        return 'crush'

class SmartPhone:
    def does(self):
        return 'ring'

class Robot:
    def __init__(self):
        self.laser = Laser()
        self.claw = Claw()
        self.smartphone = SmartPhone()

    def does(self):
        print(self.laser.does())
        print(self.claw.does())
        print(self.smartphone.does())

robot = Robot()
robot.does()


